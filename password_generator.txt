import random

print()
print('*** Генератор безопасных паролей ***')
print()
digit = '0123456789'
lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
punctuation = '!#$%&*+-=?@^_'


def is_digit(answer: str) -> int | None:
    """
    Validation of input

    Checks if the answer consists of numbers and returns the answer as an int

    :param answer: number as a string
    :return: int(answer) or None.
    """
    return int(answer) if answer.isdigit() else None


def is_valid(answer: str) -> bool | None:
    """
    Validation of input

    if the answer is yes - returns True,
    if the answer is no - returns False,
    if the answer is different - returns None

    :param answer: Y(yes) or N(no)
    :return: True, False or None
    """
    if answer in ['Y', 'y']:
        return True
    elif answer in ['N', 'n']:
        return False
    else:
        return None


def get_input(prompt: str, validator) -> int | bool:
    """
    Entering and checking data

    Takes the answer to the question and
    a reference to the validator, runs a
    check for correct input, and returns
    the result if it is not None

    :param prompt: answer to question
    :param validator: function to check the correctness of the input
    :return: number for the first two questions,
             True if the answer is yes and False if the answer is no
    """
    while True:
        answer = input(prompt)
        result = validator(answer)
        if result is not None:
            return result
        print('Пожалуйста, введите корректный ответ:\t')


# call a function to input and validate data
psw_cnt = get_input('Введите количество генерируемых паролей: \n', is_digit)
psw_len = get_input('Введите длину генерируемых паролей: \n', is_digit)
psw_dgt = get_input('Включать ли в пароль цифры? Y/N: \n', is_valid)
psw_upp = get_input('Включать ли в пароль прописные буквы? Y/N: \n', is_valid)
psw_lwr = get_input('Включать ли в пароль строчные буквы? Y/N: \n', is_valid)
psw_smb = get_input('Включать ли в пароль символы? Y/N: \n', is_valid)
psw_sbl = get_input('Исключать ли из пароля неоднозначные символы? Y/N: \n', is_valid)


# a password is formed from the selected characters
for _ in range(psw_cnt):
    password = ''
    for j in range(psw_len):
        if psw_dgt:
            password += random.choice(digit)
        if psw_lwr:
            password += random.choice(lowercase_letters)
        if psw_upp:
            password += random.choice(uppercase_letters)
        if psw_smb:
            password += random.choice(punctuation)
    # remove bad characters if needed
    if psw_sbl:
        password = [c for c in password if c not in 'il1Lo0O']
    # the password is converted from a string to a list of the specified length
    new_password = list(password)[:psw_len]
    # list symbols are shuffled
    random.shuffle(new_password)
    # the list is converted to a string
    password = ''.join(new_password)
    print(password)
